.. Copyright (C) 2021 Wazuh, Inc.

.. vu_how_it_works:

How it works
============

To be able to detect vulnerabilities, now agents are able to natively collect a list of installed applications, sending it periodically to the manager (where it is stored in local sqlite databases, one per agent). Also, the manager builds a global vulnerability database, from publicly available CVE repositories, using it later to cross-correlate this information with the agent's applications inventory data.

The global vulnerability database is created automatically, currently pulling data from the following repositories:

- `<https://canonical.com>`_: Used to pull CVEs for Ubuntu Linux distributions.
- `<https://www.redhat.com>`_: Used to pull CVEs for Red Hat and CentOS Linux distributions.
- `<https://www.debian.org>`_: Used to pull CVEs for Debian Linux distributions.
- `<https://nvd.nist.gov/>`_: Used to pull CVEs from the National Vulnerability Database.
- `<https://feed.wazuh.com/>`_: Used to pull the MSU feed with CVEs and patches for Microsoft products.

This database can be configured to be updated periodically, ensuring that the solution will check for the very latest CVEs.

Once the global vulnerability database (with the CVEs) is created, the detection process looks for vulnerable packages in the inventory databases (unique per agent). Alerts are generated when a CVE (Common Vulnerabilities and Exposures) affects a package that is known to be installed in one of the monitored servers. A package is labeled as vulnerable when its version is contained within the affected range of a CVE.
The results are presented as alerts and also stored in a database. So you can check the last scan alerts, or query every single agent's vulnerable software DB.

.. _vuln_det_scan_types:

Scan types
^^^^^^^^^^

The Vulnerability Detector module can run a scan on startup (:ref:`run_on_start <vuln_det_run_on_start>`) and every certain period of time (:ref:`interval <vuln_det_interval>`).
In any of these cases, the packages and the operating system that were already scanned will be re-scanned if the database of vulnerabilities receives new CVEs information and :ref:`min_full_scan_interval <vuln_det_min_full_scan_interval>` expires.
This improves the performance and avoids repeated alerts during a configurable time. We have then three different types of scan:

- Baseline: This scan type will be triggered the first time after Vulnerability Detector is enabled. It performs a full scan for every single package installed as well as the operating system. As a result, the CVEs inventory will have the information of the vulnerabilities detected but no alerts will be generated.
- Full scan: In this scan type, every single package installed as well as the operating system are scanned. It runs only when the configured :ref:`min_full_scan_interval <vuln_det_min_full_scan_interval>` expires and the CVEs database is updated with new information. As a result, the newly detected vulnerabilities and the ones that no longer affect the agent will be alerted.
- Partial scans: Only new packages are scanned and the vulnerabilities detected are alerted.

There are few considerations that arise from this behavior:

- The user can not trigger a full scan manually, the only option is to disable and enable Vulnerability Detector to trigger the baseline scan. For that purpose a service restart is needed.
- The partial scans generate alerts for new packages, but they do not delete alerts for removed packages.
- Partial scans can be triggered with a Manager restart.

Check :doc:`Vulnerability detector settings<../../reference/ossec-conf/vuln-detector>` for more configuration details.

The following example may be useful to understand all steps involved

.. thumbnail:: ../../../images/manual/vuln-detector/vuln-detector-workflow.png
    :title: Vulnerability detector workflow
    :align: center
    :width: 100%
